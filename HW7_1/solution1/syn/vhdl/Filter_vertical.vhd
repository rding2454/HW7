-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter_vertical is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Input_r_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    Input_r_ce0 : OUT STD_LOGIC;
    Input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    Input_r_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    Input_r_ce1 : OUT STD_LOGIC;
    Input_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    Output_r_address0 : OUT STD_LOGIC_VECTOR (22 downto 0);
    Output_r_ce0 : OUT STD_LOGIC;
    Output_r_we0 : OUT STD_LOGIC;
    Output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Filter_vertical is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv17_1E8D0 : STD_LOGIC_VECTOR (16 downto 0) := "11110100011010000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_108 : STD_LOGIC_VECTOR (8 downto 0) := "100001000";
    constant ap_const_lv11_58E : STD_LOGIC_VECTOR (10 downto 0) := "10110001110";
    constant ap_const_lv12_768 : STD_LOGIC_VECTOR (11 downto 0) := "011101101000";
    constant ap_const_lv12_B1C : STD_LOGIC_VECTOR (11 downto 0) := "101100011100";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv10_1DA : STD_LOGIC_VECTOR (9 downto 0) := "0111011010";
    constant ap_const_lv11_3B4 : STD_LOGIC_VECTOR (10 downto 0) := "01110110100";
    constant ap_const_lv12_942 : STD_LOGIC_VECTOR (11 downto 0) := "100101000010";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_1DA : STD_LOGIC_VECTOR (16 downto 0) := "00000000111011010";
    constant ap_const_lv16_62 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_289 : STD_LOGIC_VECTOR (16 downto 0);
    signal X_reg_300 : STD_LOGIC_VECTOR (8 downto 0);
    signal Y_reg_311 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_336 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal exitcond_flatten_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_341 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal reg_353 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_364_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten_next_reg_991 : STD_LOGIC_VECTOR (16 downto 0);
    signal Y_mid2_fu_376_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal Y_mid2_reg_996 : STD_LOGIC_VECTOR (8 downto 0);
    signal X_cast1_mid2_v_fu_390_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal X_cast1_mid2_v_reg_1010 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_2_cast_mid2_v_v_fu_398_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_2_cast_mid2_v_v_reg_1020 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sum_4_cast_mid2_v_v_fu_412_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_4_cast_mid2_v_v_reg_1025 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_6_cast1_mid2_v_fu_426_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_6_cast1_mid2_v_reg_1030 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_920_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sum2_reg_1039 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_928_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sum5_reg_1089 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_936_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_1104 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_944_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_reg_1119 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_load_2_reg_1124 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal buffer_load_5_reg_1130 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_load_3_reg_1136 : STD_LOGIC_VECTOR (7 downto 0);
    signal Input_load_6_reg_1143 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal Y_1_reg_1155 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_743_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_1160 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_749_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_reg_1165 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp6_fu_867_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_reg_1170 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_873_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_reg_1175 : STD_LOGIC_VECTOR (13 downto 0);
    signal Sum_4_6_fu_887_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Sum_3_6_fu_900_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal buffer_we1 : STD_LOGIC;
    signal buffer_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_phi_fu_293_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal X_phi_fu_304_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal Y_phi_fu_315_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_precharge_reg_pp0_iter0_Sum_2_reg_322 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_precharge_reg_pp0_iter1_Sum_2_reg_322 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_cast_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_4_cast_24_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_cast_mid2_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_4_cast_mid2_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_cast_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal Y_cast_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_22_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_cast4_mid2_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_cast_mid2_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_5_cast_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_cast_mid2_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_5_cast_mid2_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal sum_6_cast_mid2_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum5_cast_fu_916_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal exitcond_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal X_s_fu_384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_3_cast_mid2_v_fu_401_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_4_cast_mid2_v_fu_415_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_23_fu_454_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_1_cast_mid2_v_v_fu_471_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_1_cast_mid2_v_fu_474_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_2_cast_mid2_v_fu_501_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_5_cast_mid2_v_fu_511_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_521_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl10_fu_535_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl11_fu_547_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl10_cast_fu_543_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl11_cast_fu_555_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_4_fu_559_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_fu_569_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_fu_583_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_fu_595_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_591_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_603_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_4_fu_607_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_621_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_631_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_fu_647_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_655_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_1_cast1_fu_643_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_1_fu_659_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl8_fu_669_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl9_fu_680_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_676_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_687_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_2_fu_691_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_fu_704_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_711_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_5_cast1_fu_701_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_5_fu_715_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_6_fu_725_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_2_cast_fu_697_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_1_cast_fu_665_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_cast_fu_639_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_737_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_6_cast_fu_733_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_10_5_cast_fu_721_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_755_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_fu_771_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_779_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_1_cast1_fu_767_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_1_fu_783_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_fu_793_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_fu_804_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_800_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_cast_fu_811_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_2_fu_815_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_fu_828_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_835_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_5_cast1_fu_825_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_5_fu_839_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_6_fu_849_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_2_cast_fu_821_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_cast_fu_789_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_cast_fu_763_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_861_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_6_cast_fu_857_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_5_cast_fu_845_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_cast_fu_879_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_882_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp3_fu_882_p2 : signal is "no";
    signal tmp10_cast_fu_892_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_895_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp8_fu_895_p2 : signal is "no";
    signal grp_fu_920_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_920_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_920_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_928_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_928_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_928_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_936_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_936_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_944_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_944_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_920_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_920_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_928_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_928_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_936_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_944_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_889 : BOOLEAN;
    signal ap_condition_893 : BOOLEAN;
    signal ap_condition_900 : BOOLEAN;
    signal ap_condition_905 : BOOLEAN;
    signal ap_condition_909 : BOOLEAN;
    signal ap_condition_913 : BOOLEAN;
    signal ap_condition_918 : BOOLEAN;

    component Filter_HW_mac_muleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component Filter_HW_mac_mulfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component Filter_HW_mac_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Filter_vertical_bdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buffer_U : component Filter_vertical_bdEe
    generic map (
        DataWidth => 8,
        AddressRange => 270,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => buffer_d0,
        q0 => buffer_q0,
        address1 => buffer_address1,
        ce1 => buffer_ce1,
        we1 => buffer_we1,
        d1 => buffer_d1,
        q1 => buffer_q1);

    Filter_HW_mac_muleOg_U5 : component Filter_HW_mac_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 10,
        din2_WIDTH => 12,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_920_p0,
        din1 => grp_fu_920_p1,
        din2 => grp_fu_920_p2,
        dout => grp_fu_920_p3);

    Filter_HW_mac_mulfYi_U6 : component Filter_HW_mac_mulfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 10,
        din2_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_928_p0,
        din1 => grp_fu_928_p1,
        din2 => grp_fu_928_p2,
        dout => grp_fu_928_p3);

    Filter_HW_mac_mulcud_x_U7 : component Filter_HW_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_936_p0,
        din1 => grp_fu_936_p1,
        din2 => tmp_10_4_fu_559_p2,
        dout => grp_fu_936_p3);

    Filter_HW_mac_mulcud_x_U8 : component Filter_HW_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_944_p0,
        din1 => grp_fu_944_p1,
        din2 => tmp_8_4_fu_607_p2,
        dout => grp_fu_944_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_subdone = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_subdone = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_subdone = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_subdone = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    X_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                X_reg_300 <= X_cast1_mid2_v_reg_1010;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                X_reg_300 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    Y_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                Y_reg_311 <= Y_1_reg_1155;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                Y_reg_311 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp0_iter1_Sum_2_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                ap_phi_precharge_reg_pp0_iter1_Sum_2_reg_322 <= Sum_3_6_fu_900_p2;
            elsif (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                ap_phi_precharge_reg_pp0_iter1_Sum_2_reg_322 <= Sum_4_6_fu_887_p2;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0))) then 
                ap_phi_precharge_reg_pp0_iter1_Sum_2_reg_322 <= ap_phi_precharge_reg_pp0_iter0_Sum_2_reg_322;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_289 <= indvar_flatten_next_reg_991;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_289 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_918 = ap_const_boolean_1)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0))) then 
                    reg_336 <= buffer_q1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0))) then 
                    reg_336 <= buffer_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_918 = ap_const_boolean_1)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0))) then 
                    reg_341 <= buffer_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0))) then 
                    reg_341 <= buffer_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0))) then 
                reg_346 <= Input_r_q1;
            elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (tmp_reg_1035 = ap_const_lv1_1)))) then 
                reg_346 <= Input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0))) then
                Input_load_3_reg_1136 <= Input_r_q1;
                Input_load_6_reg_1143 <= Input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_358_p2))) then
                X_cast1_mid2_v_reg_1010 <= X_cast1_mid2_v_fu_390_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0))) then
                Y_1_reg_1155 <= grp_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_358_p2))) then
                Y_mid2_reg_996 <= Y_mid2_fu_376_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_987 <= exitcond_flatten_reg_987;
                exitcond_flatten_reg_987 <= exitcond_flatten_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0))) then
                buffer_load_2_reg_1124 <= buffer_q1;
                buffer_load_5_reg_1130 <= buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                indvar_flatten_next_reg_991 <= indvar_flatten_next_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (tmp_reg_1035 = ap_const_lv1_1)))) then
                reg_353 <= Input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_fu_436_p2))) then
                sum2_reg_1039 <= grp_fu_920_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0) and (exitcond_flatten_reg_987 = ap_const_lv1_0))) then
                sum5_reg_1089 <= grp_fu_928_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0))) then
                    sum_2_cast_mid2_v_v_reg_1020(8 downto 0) <= sum_2_cast_mid2_v_v_fu_398_p1(8 downto 0);
                    sum_4_cast_mid2_v_v_reg_1025(8 downto 0) <= sum_4_cast_mid2_v_v_fu_412_p1(8 downto 0);
                sum_6_cast1_mid2_v_reg_1030 <= sum_6_cast1_mid2_v_fu_426_p2;
                tmp_reg_1035 <= tmp_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0))) then
                tmp10_reg_1175 <= tmp10_fu_873_p2;
                tmp6_reg_1170 <= tmp6_fu_867_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0))) then
                tmp1_reg_1160 <= tmp1_fu_743_p2;
                tmp5_reg_1165 <= tmp5_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0))) then
                tmp4_reg_1104 <= grp_fu_936_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (tmp_reg_1035 = ap_const_lv1_1))) then
                tmp9_reg_1119 <= grp_fu_944_p3;
            end if;
        end if;
    end process;
    sum_2_cast_mid2_v_v_reg_1020(10 downto 9) <= "00";
    sum_4_cast_mid2_v_v_reg_1025(11 downto 9) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_358_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage5_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten_fu_358_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten_fu_358_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_block_pp0_stage2_subdone = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_block_pp0_stage5_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    Input_r_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, sum_3_cast_mid2_fu_407_p1, sum2_cast_fu_489_p1, X_cast4_mid2_fu_467_p1, ap_block_pp0_stage3, sum_5_cast_mid2_fu_516_p1, ap_condition_889, ap_condition_893)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3 = ap_const_boolean_0))) then 
                Input_r_address0 <= sum_5_cast_mid2_fu_516_p1(19 - 1 downto 0);
            elsif ((ap_condition_893 = ap_const_boolean_1)) then 
                Input_r_address0 <= X_cast4_mid2_fu_467_p1(19 - 1 downto 0);
            elsif ((ap_condition_889 = ap_const_boolean_1)) then 
                Input_r_address0 <= sum2_cast_fu_489_p1(19 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0))) then 
                Input_r_address0 <= sum_3_cast_mid2_fu_407_p1(19 - 1 downto 0);
            else 
                Input_r_address0 <= "XXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            Input_r_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, sum_4_cast_mid2_fu_421_p1, ap_block_pp0_stage2, sum_1_cast_mid2_fu_480_p1, ap_block_pp0_stage3, sum_2_cast_mid2_fu_506_p1, ap_block_pp0_stage4, sum_6_cast_mid2_fu_617_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4 = ap_const_boolean_0))) then 
                Input_r_address1 <= sum_6_cast_mid2_fu_617_p1(19 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3 = ap_const_boolean_0))) then 
                Input_r_address1 <= sum_2_cast_mid2_fu_506_p1(19 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2 = ap_const_boolean_0))) then 
                Input_r_address1 <= sum_1_cast_mid2_fu_480_p1(19 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0))) then 
                Input_r_address1 <= sum_4_cast_mid2_fu_421_p1(19 - 1 downto 0);
            else 
                Input_r_address1 <= "XXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            Input_r_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)))) then 
            Input_r_ce0 <= ap_const_logic_1;
        else 
            Input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0)))) then 
            Input_r_ce1 <= ap_const_logic_1;
        else 
            Input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Output_r_address0 <= sum5_cast_fu_916_p1(23 - 1 downto 0);

    Output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            Output_r_ce0 <= ap_const_logic_1;
        else 
            Output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_r_d0 <= ap_phi_precharge_reg_pp0_iter1_Sum_2_reg_322(15 downto 8);

    Output_r_we0_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten_reg_987, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_987) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            Output_r_we0 <= ap_const_logic_1;
        else 
            Output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Sum_3_6_fu_900_p2 <= std_logic_vector(unsigned(tmp6_reg_1170) + unsigned(tmp8_fu_895_p2));
    Sum_4_6_fu_887_p2 <= std_logic_vector(unsigned(tmp1_reg_1160) + unsigned(tmp3_fu_882_p2));
    X_cast1_mid2_v_fu_390_p3 <= 
        X_s_fu_384_p2 when (exitcond_fu_370_p2(0) = '1') else 
        X_phi_fu_304_p4;
    X_cast4_mid2_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_cast1_mid2_v_reg_1010),32));

    X_phi_fu_304_p4_assign_proc : process(X_reg_300, exitcond_flatten_reg_987, ap_CS_fsm_pp0_stage0, X_cast1_mid2_v_reg_1010, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            X_phi_fu_304_p4 <= X_cast1_mid2_v_reg_1010;
        else 
            X_phi_fu_304_p4 <= X_reg_300;
        end if; 
    end process;

    X_s_fu_384_p2 <= std_logic_vector(unsigned(X_phi_fu_304_p4) + unsigned(ap_const_lv9_1));
    Y_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_mid2_reg_996),32));
    Y_mid2_fu_376_p3 <= 
        ap_const_lv9_0 when (exitcond_fu_370_p2(0) = '1') else 
        Y_phi_fu_315_p4;

    Y_phi_fu_315_p4_assign_proc : process(Y_reg_311, exitcond_flatten_reg_987, ap_CS_fsm_pp0_stage0, Y_1_reg_1155, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            Y_phi_fu_315_p4 <= Y_1_reg_1155;
        else 
            Y_phi_fu_315_p4 <= Y_reg_311;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_889_assign_proc : process(ap_CS_fsm_pp0_stage2, exitcond_flatten_reg_987, tmp_reg_1035, ap_block_pp0_stage2)
    begin
                ap_condition_889 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_block_pp0_stage2 = ap_const_boolean_0));
    end process;


    ap_condition_893_assign_proc : process(ap_CS_fsm_pp0_stage2, exitcond_flatten_reg_987, tmp_reg_1035, ap_block_pp0_stage2)
    begin
                ap_condition_893 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_block_pp0_stage2 = ap_const_boolean_0));
    end process;


    ap_condition_900_assign_proc : process(exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
                ap_condition_900 <= ((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3 = ap_const_boolean_0));
    end process;


    ap_condition_905_assign_proc : process(exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
                ap_condition_905 <= ((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_block_pp0_stage3 = ap_const_boolean_0));
    end process;


    ap_condition_909_assign_proc : process(exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
                ap_condition_909 <= ((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4 = ap_const_boolean_0));
    end process;


    ap_condition_913_assign_proc : process(exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
                ap_condition_913 <= ((exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4 = ap_const_boolean_0));
    end process;


    ap_condition_918_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_987, tmp_reg_1035)
    begin
                ap_condition_918 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_358_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_flatten_fu_358_p2)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_precharge_reg_pp0_iter0_Sum_2_reg_322 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_3_cast_fu_449_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, tmp_1_cast_22_fu_493_p1, ap_block_pp0_stage3, tmp_5_cast_fu_574_p1, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            buffer_address0 <= ap_const_lv32_6(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5 = ap_const_boolean_0))) then 
            buffer_address0 <= ap_const_lv32_2(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4 = ap_const_boolean_0))) then 
            buffer_address0 <= ap_const_lv32_1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_block_pp0_stage3 = ap_const_boolean_0))) then 
            buffer_address0 <= ap_const_lv32_4(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3 = ap_const_boolean_0))) then 
            buffer_address0 <= tmp_5_cast_fu_574_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2 = ap_const_boolean_0))) then 
            buffer_address0 <= tmp_1_cast_22_fu_493_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0))) then 
            buffer_address0 <= tmp_3_cast_fu_449_p1(9 - 1 downto 0);
        else 
            buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    buffer_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, tmp_4_cast_24_fu_459_p1, ap_block_pp0_stage2, Y_cast_fu_485_p1, tmp_2_cast_fu_526_p1, tmp_4_cast_fu_626_p1, ap_block_pp0_stage5, ap_condition_900, ap_condition_905, ap_condition_909, ap_condition_913)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5 = ap_const_boolean_0))) then 
                buffer_address1 <= ap_const_lv32_5(9 - 1 downto 0);
            elsif ((ap_condition_913 = ap_const_boolean_1)) then 
                buffer_address1 <= ap_const_lv32_0(9 - 1 downto 0);
            elsif ((ap_condition_909 = ap_const_boolean_1)) then 
                buffer_address1 <= tmp_4_cast_fu_626_p1(9 - 1 downto 0);
            elsif ((ap_condition_905 = ap_const_boolean_1)) then 
                buffer_address1 <= ap_const_lv32_3(9 - 1 downto 0);
            elsif ((ap_condition_900 = ap_const_boolean_1)) then 
                buffer_address1 <= tmp_2_cast_fu_526_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2 = ap_const_boolean_0))) then 
                buffer_address1 <= Y_cast_fu_485_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0))) then 
                buffer_address1 <= tmp_4_cast_24_fu_459_p1(9 - 1 downto 0);
            else 
                buffer_address1 <= "XXXXXXXXX";
            end if;
        else 
            buffer_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (tmp_reg_1035 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            buffer_ce0 <= ap_const_logic_1;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (tmp_reg_1035 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0)))) then 
            buffer_ce1 <= ap_const_logic_1;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_d0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, reg_346, ap_CS_fsm_pp0_stage5, reg_353, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, Input_load_3_reg_1136, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            buffer_d0 <= reg_346;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5 = ap_const_boolean_0))) then 
            buffer_d0 <= Input_load_3_reg_1136;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_block_pp0_stage3 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4 = ap_const_boolean_0)))) then 
            buffer_d0 <= reg_353;
        else 
            buffer_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_d1_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, reg_346, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, Input_load_6_reg_1143, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5 = ap_const_boolean_0))) then 
            buffer_d1 <= Input_load_6_reg_1143;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_block_pp0_stage3 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4 = ap_const_boolean_0)))) then 
            buffer_d1 <= reg_346;
        else 
            buffer_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_we0_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (tmp_reg_1035 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0)) or ((exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            buffer_we0 <= ap_const_logic_1;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_we1_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_987, tmp_reg_1035, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (tmp_reg_1035 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_1035) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_987 = ap_const_lv1_0) and (tmp_reg_1035 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0)))) then 
            buffer_we1 <= ap_const_logic_1;
        else 
            buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_358_p2 <= "1" when (indvar_flatten_phi_fu_293_p4 = ap_const_lv17_1E8D0) else "0";
    exitcond_fu_370_p2 <= "1" when (Y_phi_fu_315_p4 = ap_const_lv9_108) else "0";
    grp_fu_331_p2 <= std_logic_vector(unsigned(Y_mid2_reg_996) + unsigned(ap_const_lv9_1));
    grp_fu_920_p0 <= grp_fu_920_p00(9 - 1 downto 0);
    grp_fu_920_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_mid2_reg_996),17));
    grp_fu_920_p1 <= ap_const_lv17_1DA(10 - 1 downto 0);
    grp_fu_920_p2 <= grp_fu_920_p20(12 - 1 downto 0);
    grp_fu_920_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_6_cast1_mid2_v_fu_426_p2),17));
    grp_fu_928_p0 <= grp_fu_928_p00(9 - 1 downto 0);
    grp_fu_928_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_mid2_reg_996),17));
    grp_fu_928_p1 <= ap_const_lv17_1DA(10 - 1 downto 0);
    grp_fu_928_p2 <= grp_fu_928_p20(9 - 1 downto 0);
    grp_fu_928_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_cast1_mid2_v_reg_1010),17));
    grp_fu_936_p0 <= grp_fu_936_p00(8 - 1 downto 0);
    grp_fu_936_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_336),16));
    grp_fu_936_p1 <= ap_const_lv16_62(8 - 1 downto 0);
    grp_fu_944_p0 <= grp_fu_944_p00(8 - 1 downto 0);
    grp_fu_944_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_346),16));
    grp_fu_944_p1 <= ap_const_lv16_62(8 - 1 downto 0);
    indvar_flatten_next_fu_364_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_293_p4) + unsigned(ap_const_lv17_1));

    indvar_flatten_phi_fu_293_p4_assign_proc : process(indvar_flatten_reg_289, exitcond_flatten_reg_987, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_991, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_987 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            indvar_flatten_phi_fu_293_p4 <= indvar_flatten_next_reg_991;
        else 
            indvar_flatten_phi_fu_293_p4 <= indvar_flatten_reg_289;
        end if; 
    end process;

    p_shl10_cast_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl10_fu_535_p3),15));
    p_shl10_fu_535_p3 <= (reg_341 & ap_const_lv6_0);
    p_shl11_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl11_fu_547_p3),15));
    p_shl11_fu_547_p3 <= (reg_341 & ap_const_lv1_0);
    p_shl1_cast_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_771_p3),13));
    p_shl1_fu_771_p3 <= (reg_353 & ap_const_lv4_0);
    p_shl2_cast_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_793_p3),15));
    p_shl2_fu_793_p3 <= (Input_load_3_reg_1136 & ap_const_lv6_0);
    p_shl3_cast_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_804_p3),15));
    p_shl3_fu_804_p3 <= (Input_load_3_reg_1136 & ap_const_lv1_0);
    p_shl4_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_583_p3),15));
    p_shl4_fu_583_p3 <= (reg_353 & ap_const_lv6_0);
    p_shl5_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_595_p3),15));
    p_shl5_fu_595_p3 <= (reg_353 & ap_const_lv1_0);
    p_shl6_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_828_p3),13));
    p_shl6_fu_828_p3 <= (Input_load_6_reg_1143 & ap_const_lv4_0);
    p_shl7_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_647_p3),13));
    p_shl7_fu_647_p3 <= (reg_341 & ap_const_lv4_0);
    p_shl8_cast_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_669_p3),15));
    p_shl8_fu_669_p3 <= (buffer_load_2_reg_1124 & ap_const_lv6_0);
    p_shl9_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_680_p3),15));
    p_shl9_fu_680_p3 <= (buffer_load_2_reg_1124 & ap_const_lv1_0);
    p_shl_cast_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_704_p3),13));
    p_shl_fu_704_p3 <= (buffer_load_5_reg_1130 & ap_const_lv4_0);
    sum2_cast_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_reg_1039),32));
    sum5_cast_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_reg_1089),32));
    sum_1_cast_mid2_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_cast_mid2_v_fu_474_p2),32));
    sum_1_cast_mid2_v_fu_474_p2 <= std_logic_vector(unsigned(sum_1_cast_mid2_v_v_fu_471_p1) + unsigned(ap_const_lv10_1DA));
    sum_1_cast_mid2_v_v_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_cast1_mid2_v_reg_1010),10));
    sum_2_cast_mid2_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_cast_mid2_v_fu_501_p2),32));
    sum_2_cast_mid2_v_fu_501_p2 <= std_logic_vector(unsigned(sum_2_cast_mid2_v_v_reg_1020) + unsigned(ap_const_lv11_3B4));
    sum_2_cast_mid2_v_v_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_cast1_mid2_v_reg_1010),11));
    sum_3_cast_mid2_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_cast_mid2_v_fu_401_p2),32));
    sum_3_cast_mid2_v_fu_401_p2 <= std_logic_vector(unsigned(sum_2_cast_mid2_v_v_fu_398_p1) + unsigned(ap_const_lv11_58E));
    sum_4_cast_mid2_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_4_cast_mid2_v_fu_415_p2),32));
    sum_4_cast_mid2_v_fu_415_p2 <= std_logic_vector(unsigned(sum_4_cast_mid2_v_v_fu_412_p1) + unsigned(ap_const_lv12_768));
    sum_4_cast_mid2_v_v_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_cast1_mid2_v_reg_1010),12));
    sum_5_cast_mid2_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_cast_mid2_v_fu_511_p2),32));
    sum_5_cast_mid2_v_fu_511_p2 <= std_logic_vector(unsigned(sum_4_cast_mid2_v_v_reg_1025) + unsigned(ap_const_lv12_942));
    sum_6_cast1_mid2_v_fu_426_p2 <= std_logic_vector(unsigned(sum_4_cast_mid2_v_v_fu_412_p1) + unsigned(ap_const_lv12_B1C));
    sum_6_cast_mid2_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_6_cast1_mid2_v_reg_1030),32));
        tmp10_cast_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp10_reg_1175),16));

    tmp10_fu_873_p2 <= std_logic_vector(unsigned(tmp_8_6_cast_fu_857_p1) + unsigned(tmp_8_5_cast_fu_845_p1));
    tmp1_fu_743_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_639_p1) + unsigned(tmp2_fu_737_p2));
    tmp2_fu_737_p2 <= std_logic_vector(signed(tmp_10_2_cast_fu_697_p1) + signed(tmp_10_1_cast_fu_665_p1));
    tmp3_fu_882_p2 <= std_logic_vector(signed(tmp4_reg_1104) + signed(tmp5_cast_fu_879_p1));
        tmp5_cast_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_reg_1165),16));

    tmp5_fu_749_p2 <= std_logic_vector(unsigned(tmp_10_6_cast_fu_733_p1) + unsigned(tmp_10_5_cast_fu_721_p1));
    tmp6_fu_867_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_763_p1) + unsigned(tmp7_fu_861_p2));
    tmp7_fu_861_p2 <= std_logic_vector(signed(tmp_8_2_cast_fu_821_p1) + signed(tmp_8_1_cast_fu_789_p1));
    tmp8_fu_895_p2 <= std_logic_vector(signed(tmp9_reg_1119) + signed(tmp10_cast_fu_892_p1));
        tmp_10_1_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_1_fu_659_p2),16));

    tmp_10_1_fu_659_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_655_p1) - unsigned(tmp_9_1_cast1_fu_643_p1));
        tmp_10_2_cast_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_2_fu_691_p2),16));

    tmp_10_2_fu_691_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_676_p1) - unsigned(p_shl9_cast_fu_687_p1));
    tmp_10_4_fu_559_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_543_p1) - unsigned(p_shl11_cast_fu_555_p1));
        tmp_10_5_cast_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_5_fu_715_p2),14));

    tmp_10_5_fu_715_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_711_p1) - unsigned(tmp_9_5_cast1_fu_701_p1));
    tmp_10_6_cast_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_6_fu_725_p3),14));
    tmp_10_6_fu_725_p3 <= (reg_346 & ap_const_lv1_0);
    tmp_10_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_631_p3),16));
    tmp_1_cast_22_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_331_p2),32));
    tmp_1_fu_631_p3 <= (reg_336 & ap_const_lv1_0);
    tmp_2_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_521_p2),32));
    tmp_2_fu_521_p2 <= std_logic_vector(unsigned(Y_mid2_reg_996) + unsigned(ap_const_lv9_2));
    tmp_3_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_444_p2),32));
    tmp_3_fu_444_p2 <= std_logic_vector(unsigned(Y_mid2_reg_996) + unsigned(ap_const_lv9_3));
    tmp_4_23_fu_454_p2 <= std_logic_vector(unsigned(Y_mid2_reg_996) + unsigned(ap_const_lv9_4));
    tmp_4_cast_24_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_23_fu_454_p2),32));
    tmp_4_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_621_p2),32));
    tmp_4_fu_621_p2 <= std_logic_vector(unsigned(Y_mid2_reg_996) + unsigned(ap_const_lv9_6));
    tmp_5_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_569_p2),32));
    tmp_5_fu_569_p2 <= std_logic_vector(unsigned(Y_mid2_reg_996) + unsigned(ap_const_lv9_5));
    tmp_7_1_cast1_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_353),13));
    tmp_7_5_cast1_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_load_6_reg_1143),13));
        tmp_8_1_cast_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_1_fu_783_p2),16));

    tmp_8_1_fu_783_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_779_p1) - unsigned(tmp_7_1_cast1_fu_767_p1));
        tmp_8_2_cast_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_2_fu_815_p2),16));

    tmp_8_2_fu_815_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_800_p1) - unsigned(p_shl3_cast_fu_811_p1));
    tmp_8_4_fu_607_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_591_p1) - unsigned(p_shl5_cast_fu_603_p1));
        tmp_8_5_cast_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_5_fu_839_p2),14));

    tmp_8_5_fu_839_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_835_p1) - unsigned(tmp_7_5_cast1_fu_825_p1));
    tmp_8_6_cast_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_6_fu_849_p3),14));
    tmp_8_6_fu_849_p3 <= (Input_r_q1 & ap_const_lv1_0);
    tmp_8_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_755_p3),16));
    tmp_8_fu_755_p3 <= (reg_346 & ap_const_lv1_0);
    tmp_9_1_cast1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_341),13));
    tmp_9_5_cast1_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_load_5_reg_1130),13));
    tmp_fu_436_p2 <= "1" when (Y_mid2_reg_996 = ap_const_lv9_0) else "0";
end behav;
