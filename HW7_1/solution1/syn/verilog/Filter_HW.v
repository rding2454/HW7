// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Filter_HW,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=1262751,HLS_SYN_TPT=none,HLS_SYN_MEM=258,HLS_SYN_DSP=6,HLS_SYN_FF=844,HLS_SYN_LUT=2538}" *)

module Filter_HW (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_r_address0,
        Input_r_ce0,
        Input_r_q0,
        Input_r_address1,
        Input_r_ce1,
        Input_r_q1,
        Output_r_address0,
        Output_r_ce0,
        Output_r_we0,
        Output_r_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [22:0] Input_r_address0;
output   Input_r_ce0;
input  [7:0] Input_r_q0;
output  [22:0] Input_r_address1;
output   Input_r_ce1;
input  [7:0] Input_r_q1;
output  [22:0] Output_r_address0;
output   Output_r_ce0;
output   Output_r_we0;
output  [7:0] Output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [18:0] Temp_address0;
reg    Temp_ce0;
reg    Temp_we0;
wire   [7:0] Temp_q0;
reg    Temp_ce1;
wire   [7:0] Temp_q1;
wire    grp_Filter_horizontal_HW_fu_20_ap_start;
wire    grp_Filter_horizontal_HW_fu_20_ap_done;
wire    grp_Filter_horizontal_HW_fu_20_ap_idle;
wire    grp_Filter_horizontal_HW_fu_20_ap_ready;
wire   [22:0] grp_Filter_horizontal_HW_fu_20_Input_r_address0;
wire    grp_Filter_horizontal_HW_fu_20_Input_r_ce0;
wire   [22:0] grp_Filter_horizontal_HW_fu_20_Input_r_address1;
wire    grp_Filter_horizontal_HW_fu_20_Input_r_ce1;
wire   [18:0] grp_Filter_horizontal_HW_fu_20_Output_r_address0;
wire    grp_Filter_horizontal_HW_fu_20_Output_r_ce0;
wire    grp_Filter_horizontal_HW_fu_20_Output_r_we0;
wire   [7:0] grp_Filter_horizontal_HW_fu_20_Output_r_d0;
wire    grp_Filter_vertical_fu_28_ap_start;
wire    grp_Filter_vertical_fu_28_ap_done;
wire    grp_Filter_vertical_fu_28_ap_idle;
wire    grp_Filter_vertical_fu_28_ap_ready;
wire   [18:0] grp_Filter_vertical_fu_28_Input_r_address0;
wire    grp_Filter_vertical_fu_28_Input_r_ce0;
wire   [18:0] grp_Filter_vertical_fu_28_Input_r_address1;
wire    grp_Filter_vertical_fu_28_Input_r_ce1;
wire   [22:0] grp_Filter_vertical_fu_28_Output_r_address0;
wire    grp_Filter_vertical_fu_28_Output_r_ce0;
wire    grp_Filter_vertical_fu_28_Output_r_we0;
wire   [7:0] grp_Filter_vertical_fu_28_Output_r_d0;
reg    ap_reg_grp_Filter_horizontal_HW_fu_20_ap_start;
wire    ap_CS_fsm_state2;
reg    ap_reg_grp_Filter_vertical_fu_28_ap_start;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_reg_grp_Filter_horizontal_HW_fu_20_ap_start = 1'b0;
#0 ap_reg_grp_Filter_vertical_fu_28_ap_start = 1'b0;
end

Filter_HW_Temp #(
    .DataWidth( 8 ),
    .AddressRange( 518400 ),
    .AddressWidth( 19 ))
Temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Temp_address0),
    .ce0(Temp_ce0),
    .we0(Temp_we0),
    .d0(grp_Filter_horizontal_HW_fu_20_Output_r_d0),
    .q0(Temp_q0),
    .address1(grp_Filter_vertical_fu_28_Input_r_address1),
    .ce1(Temp_ce1),
    .q1(Temp_q1)
);

Filter_horizontal_HW grp_Filter_horizontal_HW_fu_20(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Filter_horizontal_HW_fu_20_ap_start),
    .ap_done(grp_Filter_horizontal_HW_fu_20_ap_done),
    .ap_idle(grp_Filter_horizontal_HW_fu_20_ap_idle),
    .ap_ready(grp_Filter_horizontal_HW_fu_20_ap_ready),
    .Input_r_address0(grp_Filter_horizontal_HW_fu_20_Input_r_address0),
    .Input_r_ce0(grp_Filter_horizontal_HW_fu_20_Input_r_ce0),
    .Input_r_q0(Input_r_q0),
    .Input_r_address1(grp_Filter_horizontal_HW_fu_20_Input_r_address1),
    .Input_r_ce1(grp_Filter_horizontal_HW_fu_20_Input_r_ce1),
    .Input_r_q1(Input_r_q1),
    .Output_r_address0(grp_Filter_horizontal_HW_fu_20_Output_r_address0),
    .Output_r_ce0(grp_Filter_horizontal_HW_fu_20_Output_r_ce0),
    .Output_r_we0(grp_Filter_horizontal_HW_fu_20_Output_r_we0),
    .Output_r_d0(grp_Filter_horizontal_HW_fu_20_Output_r_d0)
);

Filter_vertical grp_Filter_vertical_fu_28(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Filter_vertical_fu_28_ap_start),
    .ap_done(grp_Filter_vertical_fu_28_ap_done),
    .ap_idle(grp_Filter_vertical_fu_28_ap_idle),
    .ap_ready(grp_Filter_vertical_fu_28_ap_ready),
    .Input_r_address0(grp_Filter_vertical_fu_28_Input_r_address0),
    .Input_r_ce0(grp_Filter_vertical_fu_28_Input_r_ce0),
    .Input_r_q0(Temp_q0),
    .Input_r_address1(grp_Filter_vertical_fu_28_Input_r_address1),
    .Input_r_ce1(grp_Filter_vertical_fu_28_Input_r_ce1),
    .Input_r_q1(Temp_q1),
    .Output_r_address0(grp_Filter_vertical_fu_28_Output_r_address0),
    .Output_r_ce0(grp_Filter_vertical_fu_28_Output_r_ce0),
    .Output_r_we0(grp_Filter_vertical_fu_28_Output_r_we0),
    .Output_r_d0(grp_Filter_vertical_fu_28_Output_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_Filter_horizontal_HW_fu_20_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_Filter_horizontal_HW_fu_20_ap_start <= 1'b1;
        end else if ((1'b1 == grp_Filter_horizontal_HW_fu_20_ap_ready)) begin
            ap_reg_grp_Filter_horizontal_HW_fu_20_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_Filter_vertical_fu_28_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_reg_grp_Filter_vertical_fu_28_ap_start <= 1'b1;
        end else if ((1'b1 == grp_Filter_vertical_fu_28_ap_ready)) begin
            ap_reg_grp_Filter_vertical_fu_28_ap_start <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Temp_address0 = grp_Filter_vertical_fu_28_Input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Temp_address0 = grp_Filter_horizontal_HW_fu_20_Output_r_address0;
    end else begin
        Temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Temp_ce0 = grp_Filter_vertical_fu_28_Input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Temp_ce0 = grp_Filter_horizontal_HW_fu_20_Output_r_ce0;
    end else begin
        Temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Temp_ce1 = grp_Filter_vertical_fu_28_Input_r_ce1;
    end else begin
        Temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Temp_we0 = grp_Filter_horizontal_HW_fu_20_Output_r_we0;
    end else begin
        Temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_Filter_vertical_fu_28_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_Filter_vertical_fu_28_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_Filter_horizontal_HW_fu_20_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_Filter_vertical_fu_28_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_r_address0 = grp_Filter_horizontal_HW_fu_20_Input_r_address0;

assign Input_r_address1 = grp_Filter_horizontal_HW_fu_20_Input_r_address1;

assign Input_r_ce0 = grp_Filter_horizontal_HW_fu_20_Input_r_ce0;

assign Input_r_ce1 = grp_Filter_horizontal_HW_fu_20_Input_r_ce1;

assign Output_r_address0 = grp_Filter_vertical_fu_28_Output_r_address0;

assign Output_r_ce0 = grp_Filter_vertical_fu_28_Output_r_ce0;

assign Output_r_d0 = grp_Filter_vertical_fu_28_Output_r_d0;

assign Output_r_we0 = grp_Filter_vertical_fu_28_Output_r_we0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_Filter_horizontal_HW_fu_20_ap_start = ap_reg_grp_Filter_horizontal_HW_fu_20_ap_start;

assign grp_Filter_vertical_fu_28_ap_start = ap_reg_grp_Filter_vertical_fu_28_ap_start;

endmodule //Filter_HW
